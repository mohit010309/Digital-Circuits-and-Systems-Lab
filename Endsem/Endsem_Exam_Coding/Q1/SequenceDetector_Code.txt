----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 25.11.2020 09:35:03
-- Design Name: 
-- Module Name: Sequence_Detector - behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity Sequence_Detector is
port (
    clk : in std_logic;
    reset : in std_logic;
    x : in std_logic;
    z : out std_logic
    );
end Sequence_Detector;

architecture behavioral of Sequence_Detector is
type state is (s0,s1,s2,s3,s4); --definition of state
signal present_state,next_state: state; --declaring signals of type state
signal flag:std_logic:='0'; --for checking if sequence is detected
begin
--defining code for present_state logic
process(clk,reset)
begin
    if(reset='1') then
        present_state <= s0;
    elsif(rising_edge(clk)) then
        present_state <= next_state;
    end if;
end process;

--defining code for next_state logic
process(x,present_state)
begin
    next_state <= present_state;
    case present_state is
        when s0 =>
            if(x='1') then
                next_state <= s1;
            else
                next_state <= s0;
            end if;
        when s1 =>
            if(x='0') then
                next_state <= s2;
            else
                next_state <= s1;
            end if;
        when s2 =>
            if(x='0') then
                next_state <= s3;
            else
                next_state <= s1;
            end if;
        when s3 =>
            if(x='0') then
                next_state <= s4;
                flag <= '1';
            else
                next_state <= s1;
            end if;
        when s4=>
            if(x='0') then
                next_state <= s0;
            else
                next_state <= s1;
            end if;
      end case;
  end process;
  -- checking and setting the output logic
  process(flag)
  begin
    if(flag='1') then
        z <= '1';
    else
        z <= '0';
    end if;
  end process;      

end behavioral;